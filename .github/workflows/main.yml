name: Testes Automatizados com Robot Framework

# Define os eventos que irão disparar este workflow
on:
  # Dispara o workflow em cada push para a branch 'main'
  push:
    branches:
      - main
  # Permite disparar o workflow manualmente pela interface do GitHub
  workflow_dispatch:

# Define os jobs (tarefas) que serão executados neste workflow
jobs:
  # Nome do job: 'executar-testes-robot'
  executar-testes-robot:
    # Define o ambiente onde o job será executado. 'ubuntu-latest' é uma máquina virtual Linux.
    runs-on: ubuntu-latest

    # Define os passos (steps) que serão executados dentro deste job
    steps:
      # Passo 1: Faz o checkout do código do seu repositório
      # Isso permite que o workflow acesse seus arquivos de teste
      - name: Checkout do Código
        uses: actions/checkout@v4 # Usa a ação oficial do GitHub para checkout

      # Passo 2: Configura o ambiente Python
      # O Robot Framework é baseado em Python, então precisamos garantir que o Python esteja disponível
      - name: Configurar Python
        uses: actions/setup-python@v4 # Usa a ação oficial para configurar o Python
        with:
          python-version: '3.x' # Define a versão do Python a ser usada (ex: '3.9', '3.10', '3.x' para a última 3)

      # Passo 3: Instala o Robot Framework e as bibliotecas necessárias
      # 'robotframework-seleniumlibrary' é comum para testes web
      # 'webdriver_manager' ajuda a gerenciar os drivers de navegador
      - name: Instalar Dependências do Robot Framework
        run: |
          python -m pip install --upgrade pip
          pip install robotframework
          pip install robotframework-seleniumlibrary
          pip install webdriver_manager 
      # Para gerenciar drivers de navegador (Chrome, Firefox, etc.)

      # Passo 4: Configura o driver do navegador (ex: ChromeDriver para Chrome)
      # O SeleniumLibrary precisa de um driver de navegador para interagir com a web.
      # O webdriver_manager geralmente baixa o driver automaticamente quando o teste é executado,
      # mas é bom garantir que o navegador esteja instalado.
      - name: Instalar Navegador (Chrome)
        run: |
          sudo apt-get update
          sudo apt-get install google-chrome-stable -y

      # Passo 5: Executa os testes do Robot Framework
      # Substitua 'caminho/para/seus/testes' pelo diretório ou arquivo .robot que contém seus testes
      - name: Rodar Testes Robot Framework
        # A flag '--outputdir' especifica onde os relatórios serão salvos
        # A flag '--variable BROWSER:Chrome' pode ser usada para definir o navegador via linha de comando
        run: |
          robot --outputdir ./results https://github.com/HenriqueRiboliJunior/resultado_testes.git

      # Passo 6 (Opcional): Upload dos resultados dos testes como artefatos
      # Isso permite que você baixe os logs, relatórios e screenshots gerados pelos testes
      - name: Upload de Resultados dos Testes
        uses: actions/upload-artifact@v4 # Usa a ação oficial para upload de artefatos
        if: always() # Garante que este passo sempre seja executado, mesmo se os testes falharem
        with:
          name: resultados-robot-framework # Nome do artefato
          path: ./results # Caminho para os arquivos de resultados
